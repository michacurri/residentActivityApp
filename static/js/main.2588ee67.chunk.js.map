{"version":3,"sources":["components/admin/AdminInputSpotsAvail.js","firebase.js","components/admin/InputActivityName.js","components/admin/AdminCreateActivity.js","components/admin/InputActivityBlock.js","components/admin/UserData.js","components/admin/AdminPage.js","components/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["AdminInputSpotsAvail","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","InputActivityName","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","database","ref","push","state","activities","activityName","activityDate","activitySpotsAvail","console","log","on","response","newActivities","data","val","key","activity","id","htmlFor","type","this","onChange","date","placeholder","onClick","AdminCreateActivity","InputActivityBlock","UserData","residents","residentData","userData","resident","map","suite","first","last","hasCaregiver","requiresAssist","mealPreference","email","AdminPage","LoginPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2588ee67.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AdminInputSpotsAvail extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"AdminInputSpotsAvail\">\r\n        {/* <form action=\"\">\r\n          <input id=\"adminInputSpotsAvail\" type=\"text\" placeholder=\"#\"/>\r\n          <label htmlFor=\"adminInputSpotsAvail\"></label>\r\n        </form> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default AdminInputSpotsAvail","// firebase.js\n\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDmWwuvLnKOdbyyMY71auoY-uhRkvQuK_E\",\n  authDomain: \"excursions-userdata.firebaseapp.com\",\n  databaseURL: \"https://excursions-userdata.firebaseio.com\",\n  projectId: \"excursions-userdata\",\n  storageBucket: \"excursions-userdata.appspot.com\",\n  messagingSenderId: \"955447819901\",\n  appId: \"1:955447819901:web:ef6954f4547765e046fb14\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","// InputActivityName.js\r\n\r\nimport React from \"react\";\r\nimport firebase from \"../../firebase\";\r\nimport { Component } from \"react\";\r\n\r\nclass InputActivityName extends Component {\r\n  // pushes Data to a database for Activities\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      activities: [],\r\n      // activityName: \"\",\r\n      // activitySpotsAvail: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    // console.log(dbRef)\r\n\r\n    dbRef.on(\"value\", (response) => {\r\n      const newActivities = [];\r\n      const data = response.val().activities;\r\n      console.log(data);\r\n\r\n      for (let key in data) {\r\n        newActivities.push({\r\n          activity: data[key],\r\n          id: key,\r\n        });\r\n        console.log(data[key]);\r\n        console.log(key);\r\n        \r\n      }\r\n\r\n      console.log(this.state.newActivities);\r\n      this.setState({\r\n        activities: newActivities,\r\n      });\r\n    });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    // GOAL of function\r\n    // tell React to update userInput state\r\n    // to be equal to whatever user is typing\r\n\r\n    this.setState({\r\n      // userInput: event.target.value,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {   \r\n    event.preventDefault();\r\n    // get another locally scoped dbRef\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // using the FIREBASE push method (not a JavaScript push)\r\n    dbRef.push(this.state.activities);\r\n    \r\n    // clear the userInput\r\n    this.setState({\r\n      activityName: \"\",\r\n      activityDate: {},\r\n      activitySpotsAvail: 0,\r\n      // accessible: '',\r\n      // mealIncluded: ''\r\n    });\r\n    console.log(this.state);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <label htmlFor=\"activityName\">Activity Name</label>\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.activityName}\r\n          onChange={this.handleChange}\r\n          name=\"activityName\"\r\n          id=\"activityName\"\r\n        />\r\n        <br />\r\n        <label htmlFor=\"activityDate\">Date of Activity</label>\r\n        <br />\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          onChange={this.handleChange}\r\n          name=\"activityDate\"\r\n          id=\"activityDate\"\r\n        />\r\n        <br />\r\n        {/* <input\r\n          type=\"checkbox\"\r\n          value={this.state.accessible}\r\n          onChange={this.handleChange}\r\n          name=\"accessibleCheckbox\"\r\n          id=\"accessibleCheckbox\"\r\n        />\r\n        <label htmlFor=\"accessibleCheckbox\">Is this activity accessible?</label>\r\n        <br />\r\n\r\n        <input\r\n          type=\"checkbox\"\r\n          value={this.state.mealIncluded}\r\n          onChange={this.handleChange}\r\n          name=\"mealCheckbox\"\r\n          id=\"mealCheckbox\"\r\n        />\r\n        <label htmlFor=\"mealCheckbox\">Is a meal included?</label>\r\n        <br /> */}\r\n\r\n        <label htmlFor=\"activitySpots\">Space Available</label>\r\n        <br />\r\n        <input\r\n          type=\"number\"\r\n          value={this.state.activitySpotsAvail}\r\n          onChange={this.handleChange}\r\n          name=\"activitySpotsAvail\"\r\n          id=\"activitySpotsAvail\"\r\n          placeholder=\"#\"\r\n        />\r\n        <br />\r\n        <button onClick={this.handleSubmit}>\r\n          Add Activity to the Calendar\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default InputActivityName;\r\n","// AdminCreateActivity.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport AdminInputSpotsAvail from './AdminInputSpotsAvail';\r\nimport InputActivityName from './InputActivityName'\r\n\r\nclass AdminCreateActivity extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"adminCreateActivity\">\r\n        <InputActivityName />\r\n        <AdminInputSpotsAvail />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdminCreateActivity;\r\n","import React, { Component } from \"react\";\r\nimport AdminCreateActivity from './AdminCreateActivity'\r\n\r\nclass InputActivityBlock extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"inputActivityBlock\">\r\n        <h1>activity maker</h1>\r\n          <div className=\"activityBackground\">\r\n            <AdminCreateActivity />\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputActivityBlock;\r\n","// UserData.js\r\n\r\nimport firebase from \"../../firebase\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass UserData extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      residents: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on(\"value\", (response) => {\r\n      const residentData = [];\r\n      const data = response.val().userData;\r\n\r\n      for (let key in data) {\r\n        residentData.push({\r\n          resident: data[key],\r\n          id: key,\r\n        });\r\n      }\r\n\r\n      this.setState({\r\n        residents: residentData,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"residentData\">\r\n        <table>\r\n          <caption>\r\n            <h2>Resident Data</h2>\r\n          </caption>\r\n          <thead>\r\n            <tr>\r\n              <th>Suite</th>\r\n              <th>First</th>\r\n              <th>Last</th>\r\n              <th>Caregiver</th>\r\n              <th>Assistance</th>\r\n              <th>Meal</th>\r\n              <th>email</th>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n        {this.state.residents.map(({id, resident}) => {\r\n          return (\r\n            <table key={id}>\r\n              <tbody>\r\n                <tr>\r\n                  <th></th>\r\n                  <td name=\"suite\">{resident.suite}</td>\r\n                  <td name=\"first\">{resident.first}</td>\r\n                  <td name=\"last\">{resident.last}</td>\r\n                  <td name=\"hasCaregiver\">{resident.hasCaregiver}</td>\r\n                  <td name=\"requiresAssist\">{resident.requiresAssist}</td>\r\n                  <td name=\"mealPreference\">{resident.mealPreference}</td>\r\n                  <td name=\"email\">{resident.email}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          );\r\n        })}\r\n        ;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserData;\r\n","// AdminPage.js\r\nimport React, { Component } from \"react\";\r\nimport InputActivityBlock from \"./InputActivityBlock\";\r\nimport UserData from \"./UserData\";\r\n\r\nclass AdminPage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"adminPage\">\r\n        <InputActivityBlock />\r\n        {/* <FormBuilderBlock /> */}\r\n        {/* <UserDataSelector /> */}\r\n        <UserData />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdminPage;\r\n","// LoginPage.js\nimport React, { Component } from 'react'\nimport AdminPage from './admin/AdminPage';\n// import UserPage from './components/user/UserPage';\n\nclass LoginPage extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AdminPage />\n        {/* <UserPage /> */}\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;","import React, { Component, Fragment } from \"react\";\r\nimport \"./App.css\";\r\nimport LoginPage from \"./components/LoginPage\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <LoginPage />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}